{
  "extends": "eslint-config-google",

  "env": {
    "browser": true,
    "jasmine": true,
    "jquery": true
  },

  "globals": {
    "_": false,
    "can": false,
    "CMS": false,
    "GGRC": false,
    "moment": false,
    "Mustache": false,
    "MutationObserver": false,
    "ModelRefreshQueue": false,
    "Permission": false,
    "PersistentNotifier": false,
    "RefreshQueue": false,
    "RefreshQueueManager": false,
    "Spinner": false,
    "Stickyfill": false,
    "ZeroClipboard": false,

    // TODO: Check why these vars are global
    "process_gapi_query": false,
    "calculate_spinner_z_index": false,
    "resolve_computed": false,
    "rangy": false,
    "gapi": false,
    "oauth_dfd": false,
    "getPageToken": false,
    "google": false,
    "st": false,
    "wysihtml5ParserRules": false,
    "wysihtml5": false,
  },

  "rules": {
    "id-length": [1, {
      "min": 2,
      "max": 25,
      "properties": "never",
      // x, y, z - Point coordinates
      // i, j, k - Loop indexes
      // k, v - Key, Value
      // a, b - common parameter names in sorting comparison helper functions
      // e - exception
      // $, _ - libraries
      "exceptions": ["x", "y", "z", "i", "j", "k", "v", "a", "b", "e", "$", "_"]
    }],
    "require-jsdoc": 0,
    "space-before-function-paren": [
      2, {"anonymous": "always", "named": "never"}
    ],
    "max-len": [1, 80, 2, {
      "ignoreComments": true,
      "ignoreUrls": true
    }],
    "quotes": [2, "single", {
      "avoidEscape": true
    }],
    "no-implicit-coercion": [2, {"boolean": false}],
    "no-inline-comments": 0,
    "no-negated-condition": 0,
    "no-unused-vars": [2, {
      "args": "none",
      "vars": "all"
    }],
    // Each variable declaration must have its own var keyword
    "one-var": [2, "never"],
    "quote-props": [2, "as-needed", { "numbers": true, "keywords": true }],
    "vars-on-top": 2,


    // CanJS uses a lot of the following, thus the exceptions...
    //
    // NOTE: camelCase check is disabled for object properties, because 3rd
    // party libraries' APIs might expect object arguments with properties
    // following a different naming conventions, and trying to work around
    // that just to make the linter happy is simply not worth it.
    "camelcase":  [1, {properties: "never"}],
    "new-cap": 0,
    "no-new": 0,
  }
}
